generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username           Int                @id @unique
  created_at         DateTime           @default(now())
  password           String
  name               String
  surname            String
  patronymic         String?
  preferred_settings PreferredSettings?
  contacts           Contact?
  addresses          Address[]
  login_histories    LoginHistory[]
  token              Token[]
  role               Role               @default(USER)

  @@map("users")
}

enum Role {
  VISITOR
  USER
  ADMIN
  OWNER

  @@map("roles")
}

model Contact {
  username           Int       @unique @id
  email              String
  email_activated    Boolean   @default(false)
  email_activated_at DateTime?
  phone              String
  phone_activated    Boolean   @default(false)
  phone_activated_at DateTime?
  user               User      @relation(fields: [username], references: [username], onDelete: Cascade)

  @@map("contacts")
}

model LoginHistory {
  id         String      @unique @default(uuid()) @id
  username   Int
  login_time DateTime @default(now())
  ip_address String
  user_agent String
  user       User     @relation(fields: [username], references: [username], onDelete: Cascade)

  @@map("login_histories")
}

model Address {
  id        String         @unique @default(uuid()) @id
  username  Int
  street    String
  house     String
  apartment String?
  type      AddressType
  system_id String
  payments  Payment[]
  user      User        @relation(fields: [username], references: [username], onDelete: Cascade)

  @@map("addresses")
}

enum AddressType {
  CITIZEN
  BUSINESS

  @@map("address_type")
}

model ExternalStreetMap {
  name    String  @id @unique
  grad_id String?

  @@map("street_map")
}

model PreferredSettings {
  username          Int     @unique @id
  preferred_theme   String  @default("dark")
  preferred_address String?
  user              User    @relation(fields: [username], references: [username], onDelete: Cascade)

  @@map("preferred_settings")
}

model Payment {
  payment_id String        @unique @id
  addressId  String
  meters     String[]
  services   String[]
  amount     String
  payer      String
  status     PaymentStatus
  created_at DateTime      @default(now())
  addr       Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentStatus {
  waiting_for_capture
  pending
  succeeded
  canceled
}

model Token {
  id         String   @id @default(uuid())
  token      String   @unique
  expired_in DateTime
  username   Int
  user_agent String
  user       User     @relation(fields: [username], references: [username], onDelete: Cascade)

  @@map("tokens")
}
